name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  RUBY_VERSION: '3.2.3'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scheduleease_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ./api

      - name: Set up database
        working-directory: ./api
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scheduleease_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load

      - name: Run RSpec tests
        working-directory: ./api
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scheduleease_test
          REDIS_URL: redis://localhost:6379/0
          COVERAGE: true
        run: |
          bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec_results.xml

      - name: Upload backend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: api/tmp/rspec_results.xml

      - name: Upload backend coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-coverage
          path: api/coverage/

  # Backend Security & Quality
  backend-security:
    name: Backend Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ./api

      - name: Run Brakeman security scan
        working-directory: ./api
        run: |
          bundle exec brakeman --format json --output tmp/brakeman.json --exit-on-warn --quiet
        continue-on-error: true

      - name: Run bundle audit
        working-directory: ./api
        run: |
          bundle exec bundle-audit check --update
        continue-on-error: true

      - name: Run RuboCop
        working-directory: ./api
        run: |
          bundle exec rubocop --format json --out tmp/rubocop.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-security-reports
          path: |
            api/tmp/brakeman.json
            api/tmp/rubocop.json

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Jest tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Upload frontend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: frontend/coverage/

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # Frontend Build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:3001' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next/

  # E2E Tests (optional, runs only on main branch)
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scheduleease_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ./api

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Set up backend database
        working-directory: ./api
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scheduleease_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:seed

      - name: Start backend server
        working-directory: ./api
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scheduleease_test
          REDIS_URL: redis://localhost:6379/0
          PORT: 3001
        run: |
          bundle exec rails server -p 3001 &
          sleep 10
        
      - name: Start frontend server
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          PORT: 3000
        run: |
          npm run build
          npm start &
          sleep 10

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Code Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: backend-coverage/

      - name: Download frontend coverage
        uses: actions/download-artifact@v3
        with:
          name: frontend-coverage
          path: frontend-coverage/

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend-coverage/lcov.info,./frontend-coverage/lcov.info
          flags: backend,frontend
          name: scheduleease-coverage
          fail_ci_if_error: false

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend-test, frontend-test, backend-security, frontend-build]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deployment step would go here"
          echo "This could include:"
          echo "- Building Docker images"
          echo "- Pushing to container registry"
          echo "- Deploying to cloud provider (AWS, GCP, etc.)"
          echo "- Running database migrations"
          echo "- Health checks"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, backend-security, frontend-build]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"
          
      - name: Notify failure
        if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' }}
        run: |
          echo "❌ Some tests failed. Please check the logs."
          exit 1 